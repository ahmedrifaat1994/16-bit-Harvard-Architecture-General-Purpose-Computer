// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
	
	//choose the right register
	DMux8Way(in = true, sel = address, a = a, b = b, c = c, d = d, e = e, f = f, g = g, h = h);
	
	//select the data to send or not
	Mux16(a = false, b = in, sel = a, out  = muxout0);
	Mux16(a = false, b = in, sel = b, out  = muxout1);
	Mux16(a = false, b = in, sel = c, out  = muxout2);
	Mux16(a = false, b = in, sel = d, out  = muxout3);
	Mux16(a = false, b = in, sel = e, out  = muxout4);
	Mux16(a = false, b = in, sel = f, out  = muxout5);
	Mux16(a = false, b = in, sel = g, out  = muxout6);
	Mux16(a = false, b = in, sel = h, out  = muxout7);
	
	//send the load to the right register
	DMux8Way(in = load, sel = address, a = load0, b = load1, c = load2, d = load3, e = load4, f = load5, g = load6, h = load7 );
	
	//save data into register
	Register(in = muxout0, load = load0, out = out0);
	Register(in = muxout1, load = load1, out = out1);
	Register(in = muxout2, load = load2, out = out2);
	Register(in = muxout3, load = load3, out = out3);
	Register(in = muxout4, load = load4, out = out4);
	Register(in = muxout5, load = load5, out = out5);
	Register(in = muxout6, load = load6, out = out6);
	Register(in = muxout7, load = load7, out = out7);
	
	//output the data from the addressed register
	Mux8Way16(a = out0, b = out1, c = out2, d = out3, e = out4, f = out5, g = out6, h = out7, sel = address, out = out);
}